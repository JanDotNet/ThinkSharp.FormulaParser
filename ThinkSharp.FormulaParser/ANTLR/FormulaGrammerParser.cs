//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FormulaGrammer.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FormulaGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, PLUS=3, MINUS=4, TIMES=5, DIV=6, COMMA=7, POINT=8, 
		POW=9, IDENTIFIER=10, SCIENTIFIC_NUMBER=11, WS=12;
	public const int
		RULE_formula = 0, RULE_expression = 1, RULE_multiplyingExpression = 2, 
		RULE_powExpression = 3, RULE_signedAtom = 4, RULE_atom = 5, RULE_scientific = 6, 
		RULE_func = 7, RULE_variable = 8;
	public static readonly string[] ruleNames = {
		"formula", "expression", "multiplyingExpression", "powExpression", "signedAtom", 
		"atom", "scientific", "func", "variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "','", "'.'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "COMMA", "POINT", 
		"POW", "IDENTIFIER", "SCIENTIFIC_NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FormulaGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FormulaGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FormulaGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FormulaGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FormulaContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FormulaGrammerParser.Eof, 0); }
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterFormula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitFormula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		FormulaContext _localctx = new FormulaContext(Context, State);
		EnterRule(_localctx, 0, RULE_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; expression();
			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public MultiplyingExpressionContext[] multiplyingExpression() {
			return GetRuleContexts<MultiplyingExpressionContext>();
		}
		public MultiplyingExpressionContext multiplyingExpression(int i) {
			return GetRuleContext<MultiplyingExpressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(FormulaGrammerParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(FormulaGrammerParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(FormulaGrammerParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(FormulaGrammerParser.MINUS, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; multiplyingExpression();
			State = 26;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 22;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 23; multiplyingExpression();
				}
				}
				State = 28;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyingExpressionContext : ParserRuleContext {
		public PowExpressionContext[] powExpression() {
			return GetRuleContexts<PowExpressionContext>();
		}
		public PowExpressionContext powExpression(int i) {
			return GetRuleContext<PowExpressionContext>(i);
		}
		public ITerminalNode[] TIMES() { return GetTokens(FormulaGrammerParser.TIMES); }
		public ITerminalNode TIMES(int i) {
			return GetToken(FormulaGrammerParser.TIMES, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(FormulaGrammerParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(FormulaGrammerParser.DIV, i);
		}
		public MultiplyingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterMultiplyingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitMultiplyingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyingExpressionContext multiplyingExpression() {
		MultiplyingExpressionContext _localctx = new MultiplyingExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_multiplyingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; powExpression();
			State = 34;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TIMES || _la==DIV) {
				{
				{
				State = 30;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMES || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 31; powExpression();
				}
				}
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowExpressionContext : ParserRuleContext {
		public SignedAtomContext[] signedAtom() {
			return GetRuleContexts<SignedAtomContext>();
		}
		public SignedAtomContext signedAtom(int i) {
			return GetRuleContext<SignedAtomContext>(i);
		}
		public ITerminalNode[] POW() { return GetTokens(FormulaGrammerParser.POW); }
		public ITerminalNode POW(int i) {
			return GetToken(FormulaGrammerParser.POW, i);
		}
		public PowExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterPowExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitPowExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowExpressionContext powExpression() {
		PowExpressionContext _localctx = new PowExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_powExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; signedAtom();
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POW) {
				{
				{
				State = 38; Match(POW);
				State = 39; signedAtom();
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedAtomContext : ParserRuleContext {
		public SignedAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedAtom; } }
	 
		public SignedAtomContext() { }
		public virtual void CopyFrom(SignedAtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegativeAtomContext : SignedAtomContext {
		public ITerminalNode MINUS() { return GetToken(FormulaGrammerParser.MINUS, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public NegativeAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterNegativeAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitNegativeAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegativeAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionContext : SignedAtomContext {
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public FunctionContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusAtomContext : SignedAtomContext {
		public ITerminalNode PLUS() { return GetToken(FormulaGrammerParser.PLUS, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public PlusAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterPlusAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitPlusAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsignedAtomContext : SignedAtomContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public UnsignedAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterUnsignedAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitUnsignedAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedAtomContext signedAtom() {
		SignedAtomContext _localctx = new SignedAtomContext(Context, State);
		EnterRule(_localctx, 8, RULE_signedAtom);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				_localctx = new PlusAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; Match(PLUS);
				State = 46; atom();
				}
				break;
			case 2:
				_localctx = new NegativeAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; Match(MINUS);
				State = 48; atom();
				}
				break;
			case 3:
				_localctx = new FunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; func();
				}
				break;
			case 4:
				_localctx = new UnsignedAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 50; atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ScientificContext scientific() {
			return GetRuleContext<ScientificContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(FormulaGrammerParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(FormulaGrammerParser.RPAREN, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 10, RULE_atom);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCIENTIFIC_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; scientific();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; variable();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55; Match(LPAREN);
				State = 56; expression();
				State = 57; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificContext : ParserRuleContext {
		public ScientificContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientific; } }
	 
		public ScientificContext() { }
		public virtual void CopyFrom(ScientificContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ScientificNumberContext : ScientificContext {
		public ITerminalNode SCIENTIFIC_NUMBER() { return GetToken(FormulaGrammerParser.SCIENTIFIC_NUMBER, 0); }
		public ScientificNumberContext(ScientificContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterScientificNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitScientificNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificContext scientific() {
		ScientificContext _localctx = new ScientificContext(Context, State);
		EnterRule(_localctx, 12, RULE_scientific);
		try {
			_localctx = new ScientificNumberContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(SCIENTIFIC_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FormulaGrammerParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(FormulaGrammerParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(FormulaGrammerParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FormulaGrammerParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FormulaGrammerParser.COMMA, i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 14, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; Match(IDENTIFIER);
			State = 64; Match(LPAREN);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << IDENTIFIER) | (1L << SCIENTIFIC_NUMBER))) != 0)) {
				{
				State = 65; expression();
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 66; Match(COMMA);
					State = 67; expression();
					}
					}
					State = 72;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 75; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FormulaGrammerParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 16, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', 'R', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x1B', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1E', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '#', '\n', '\x4', '\f', 
		'\x4', '\xE', '\x4', '&', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '+', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '.', 
		'\v', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x36', '\n', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'>', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 'G', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'J', '\v', '\t', '\x5', '\t', 'L', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x2', '\x2', '\v', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', '\x4', 
		'\x3', '\x2', '\x5', '\x6', '\x3', '\x2', '\a', '\b', '\x2', 'R', '\x2', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\b', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x35', '\x3', '\x2', '\x2', '\x2', '\f', '=', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '?', '\x3', '\x2', '\x2', '\x2', '\x10', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'O', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x15', '\x5', '\x4', '\x3', '\x2', '\x15', '\x16', '\a', '\x2', '\x2', 
		'\x3', '\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1C', '\x5', 
		'\x6', '\x4', '\x2', '\x18', '\x19', '\t', '\x2', '\x2', '\x2', '\x19', 
		'\x1B', '\x5', '\x6', '\x4', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '$', '\x5', '\b', '\x5', '\x2', ' ', '!', '\t', '\x3', 
		'\x2', '\x2', '!', '#', '\x5', '\b', '\x5', '\x2', '\"', ' ', '\x3', '\x2', 
		'\x2', '\x2', '#', '&', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', 
		'\x2', '\x2', '\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '\a', 
		'\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '\'', 
		',', '\x5', '\n', '\x6', '\x2', '(', ')', '\a', '\v', '\x2', '\x2', ')', 
		'+', '\x5', '\n', '\x6', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', 
		'+', '.', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\t', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x5', 
		'\x2', '\x2', '\x30', '\x36', '\x5', '\f', '\a', '\x2', '\x31', '\x32', 
		'\a', '\x6', '\x2', '\x2', '\x32', '\x36', '\x5', '\f', '\a', '\x2', '\x33', 
		'\x36', '\x5', '\x10', '\t', '\x2', '\x34', '\x36', '\x5', '\f', '\a', 
		'\x2', '\x35', '/', '\x3', '\x2', '\x2', '\x2', '\x35', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '>', '\x5', '\xE', '\b', '\x2', '\x38', '>', '\x5', '\x12', 
		'\n', '\x2', '\x39', ':', '\a', '\x3', '\x2', '\x2', ':', ';', '\x5', 
		'\x4', '\x3', '\x2', ';', '<', '\a', '\x4', '\x2', '\x2', '<', '>', '\x3', 
		'\x2', '\x2', '\x2', '=', '\x37', '\x3', '\x2', '\x2', '\x2', '=', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '=', '\x39', '\x3', '\x2', '\x2', '\x2', '>', 
		'\r', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', '\r', '\x2', '\x2', 
		'@', '\xF', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\f', '\x2', 
		'\x2', '\x42', 'K', '\a', '\x3', '\x2', '\x2', '\x43', 'H', '\x5', '\x4', 
		'\x3', '\x2', '\x44', '\x45', '\a', '\t', '\x2', '\x2', '\x45', 'G', '\x5', 
		'\x4', '\x3', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', 
		'J', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x3', '\x2', '\x2', '\x2', 
		'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', '\x43', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\a', '\x4', '\x2', '\x2', 'N', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\a', '\f', '\x2', '\x2', 'P', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\t', '\x1C', '$', ',', '\x35', '=', 'H', 'K',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
