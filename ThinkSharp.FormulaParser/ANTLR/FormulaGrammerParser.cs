//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FormulaGrammer.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FormulaGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, PLUS=3, MINUS=4, TIMES=5, DIV=6, COMMA=7, POINT=8, 
		POW=9, IDENTIFIER=10, DECIMAL_NUMBER=11, INTEGER_NUMBER=12, PREFIX_BIN_NUMBER=13, 
		PREFIX_HEX_NUMBER=14, PREFIX_INT_NUMBER=15, PREFIX_OCT_NUMBER=16, PREFIX_DEC_NUMBER=17, 
		WS=18;
	public const int
		RULE_formula = 0, RULE_expression = 1, RULE_multiplyingExpression = 2, 
		RULE_powExpression = 3, RULE_signedAtom = 4, RULE_atom = 5, RULE_number = 6, 
		RULE_prefixedNumber = 7, RULE_func = 8, RULE_variable = 9;
	public static readonly string[] ruleNames = {
		"formula", "expression", "multiplyingExpression", "powExpression", "signedAtom", 
		"atom", "number", "prefixedNumber", "func", "variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "','", "'.'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "COMMA", "POINT", 
		"POW", "IDENTIFIER", "DECIMAL_NUMBER", "INTEGER_NUMBER", "PREFIX_BIN_NUMBER", 
		"PREFIX_HEX_NUMBER", "PREFIX_INT_NUMBER", "PREFIX_OCT_NUMBER", "PREFIX_DEC_NUMBER", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FormulaGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FormulaGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FormulaGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FormulaGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FormulaContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(FormulaGrammerParser.Eof, 0); }
		public FormulaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formula; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterFormula(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitFormula(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormula(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormulaContext formula() {
		FormulaContext _localctx = new FormulaContext(Context, State);
		EnterRule(_localctx, 0, RULE_formula);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; expression();
			State = 21; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public MultiplyingExpressionContext[] multiplyingExpression() {
			return GetRuleContexts<MultiplyingExpressionContext>();
		}
		public MultiplyingExpressionContext multiplyingExpression(int i) {
			return GetRuleContext<MultiplyingExpressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(FormulaGrammerParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(FormulaGrammerParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(FormulaGrammerParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(FormulaGrammerParser.MINUS, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 23; multiplyingExpression();
			State = 28;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 24;
				_la = TokenStream.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 25; multiplyingExpression();
				}
				}
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyingExpressionContext : ParserRuleContext {
		public PowExpressionContext[] powExpression() {
			return GetRuleContexts<PowExpressionContext>();
		}
		public PowExpressionContext powExpression(int i) {
			return GetRuleContext<PowExpressionContext>(i);
		}
		public ITerminalNode[] TIMES() { return GetTokens(FormulaGrammerParser.TIMES); }
		public ITerminalNode TIMES(int i) {
			return GetToken(FormulaGrammerParser.TIMES, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(FormulaGrammerParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(FormulaGrammerParser.DIV, i);
		}
		public MultiplyingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterMultiplyingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitMultiplyingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyingExpressionContext multiplyingExpression() {
		MultiplyingExpressionContext _localctx = new MultiplyingExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_multiplyingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; powExpression();
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TIMES || _la==DIV) {
				{
				{
				State = 32;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMES || _la==DIV) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 33; powExpression();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PowExpressionContext : ParserRuleContext {
		public SignedAtomContext[] signedAtom() {
			return GetRuleContexts<SignedAtomContext>();
		}
		public SignedAtomContext signedAtom(int i) {
			return GetRuleContext<SignedAtomContext>(i);
		}
		public ITerminalNode[] POW() { return GetTokens(FormulaGrammerParser.POW); }
		public ITerminalNode POW(int i) {
			return GetToken(FormulaGrammerParser.POW, i);
		}
		public PowExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterPowExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitPowExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowExpressionContext powExpression() {
		PowExpressionContext _localctx = new PowExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_powExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; signedAtom();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==POW) {
				{
				{
				State = 40; Match(POW);
				State = 41; signedAtom();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedAtomContext : ParserRuleContext {
		public SignedAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedAtom; } }
	 
		public SignedAtomContext() { }
		public virtual void CopyFrom(SignedAtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegativeAtomContext : SignedAtomContext {
		public ITerminalNode MINUS() { return GetToken(FormulaGrammerParser.MINUS, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public NegativeAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterNegativeAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitNegativeAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegativeAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusAtomContext : SignedAtomContext {
		public ITerminalNode PLUS() { return GetToken(FormulaGrammerParser.PLUS, 0); }
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public PlusAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterPlusAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitPlusAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnsignedAtomContext : SignedAtomContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public UnsignedAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterUnsignedAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitUnsignedAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsignedAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedAtomContext signedAtom() {
		SignedAtomContext _localctx = new SignedAtomContext(Context, State);
		EnterRule(_localctx, 8, RULE_signedAtom);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				_localctx = new PlusAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; Match(PLUS);
				State = 48; atom();
				}
				break;
			case MINUS:
				_localctx = new NegativeAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; Match(MINUS);
				State = 50; atom();
				}
				break;
			case LPAREN:
			case IDENTIFIER:
			case DECIMAL_NUMBER:
			case INTEGER_NUMBER:
			case PREFIX_BIN_NUMBER:
			case PREFIX_HEX_NUMBER:
			case PREFIX_INT_NUMBER:
			case PREFIX_OCT_NUMBER:
			case PREFIX_DEC_NUMBER:
				_localctx = new UnsignedAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 51; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public PrefixedNumberContext prefixedNumber() {
			return GetRuleContext<PrefixedNumberContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(FormulaGrammerParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(FormulaGrammerParser.RPAREN, 0); }
		public FuncContext func() {
			return GetRuleContext<FuncContext>(0);
		}
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 10, RULE_atom);
		try {
			State = 62;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; prefixedNumber();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 56; variable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 57; Match(LPAREN);
				State = 58; expression();
				State = 59; Match(RPAREN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 61; func();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DecimalNumberContext : NumberContext {
		public ITerminalNode DECIMAL_NUMBER() { return GetToken(FormulaGrammerParser.DECIMAL_NUMBER, 0); }
		public DecimalNumberContext(NumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterDecimalNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitDecimalNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntgerNumberContext : NumberContext {
		public ITerminalNode INTEGER_NUMBER() { return GetToken(FormulaGrammerParser.INTEGER_NUMBER, 0); }
		public IntgerNumberContext(NumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterIntgerNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitIntgerNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntgerNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 12, RULE_number);
		try {
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_NUMBER:
				_localctx = new DecimalNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 64; Match(DECIMAL_NUMBER);
				}
				break;
			case INTEGER_NUMBER:
				_localctx = new IntgerNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 65; Match(INTEGER_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixedNumberContext : ParserRuleContext {
		public PrefixedNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixedNumber; } }
	 
		public PrefixedNumberContext() { }
		public virtual void CopyFrom(PrefixedNumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrefixedOctNumberContext : PrefixedNumberContext {
		public ITerminalNode PREFIX_OCT_NUMBER() { return GetToken(FormulaGrammerParser.PREFIX_OCT_NUMBER, 0); }
		public PrefixedOctNumberContext(PrefixedNumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterPrefixedOctNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitPrefixedOctNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixedOctNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixedHexNumberContext : PrefixedNumberContext {
		public ITerminalNode PREFIX_HEX_NUMBER() { return GetToken(FormulaGrammerParser.PREFIX_HEX_NUMBER, 0); }
		public PrefixedHexNumberContext(PrefixedNumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterPrefixedHexNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitPrefixedHexNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixedHexNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixedDecNumberContext : PrefixedNumberContext {
		public ITerminalNode PREFIX_DEC_NUMBER() { return GetToken(FormulaGrammerParser.PREFIX_DEC_NUMBER, 0); }
		public PrefixedDecNumberContext(PrefixedNumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterPrefixedDecNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitPrefixedDecNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixedDecNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixedIntNumberContext : PrefixedNumberContext {
		public ITerminalNode PREFIX_INT_NUMBER() { return GetToken(FormulaGrammerParser.PREFIX_INT_NUMBER, 0); }
		public PrefixedIntNumberContext(PrefixedNumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterPrefixedIntNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitPrefixedIntNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixedIntNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixedBinNumberContext : PrefixedNumberContext {
		public ITerminalNode PREFIX_BIN_NUMBER() { return GetToken(FormulaGrammerParser.PREFIX_BIN_NUMBER, 0); }
		public PrefixedBinNumberContext(PrefixedNumberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterPrefixedBinNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitPrefixedBinNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixedBinNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrefixedNumberContext prefixedNumber() {
		PrefixedNumberContext _localctx = new PrefixedNumberContext(Context, State);
		EnterRule(_localctx, 14, RULE_prefixedNumber);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREFIX_DEC_NUMBER:
				_localctx = new PrefixedDecNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; Match(PREFIX_DEC_NUMBER);
				}
				break;
			case PREFIX_INT_NUMBER:
				_localctx = new PrefixedIntNumberContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; Match(PREFIX_INT_NUMBER);
				}
				break;
			case PREFIX_BIN_NUMBER:
				_localctx = new PrefixedBinNumberContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 70; Match(PREFIX_BIN_NUMBER);
				}
				break;
			case PREFIX_OCT_NUMBER:
				_localctx = new PrefixedOctNumberContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 71; Match(PREFIX_OCT_NUMBER);
				}
				break;
			case PREFIX_HEX_NUMBER:
				_localctx = new PrefixedHexNumberContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 72; Match(PREFIX_HEX_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FormulaGrammerParser.IDENTIFIER, 0); }
		public ITerminalNode LPAREN() { return GetToken(FormulaGrammerParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(FormulaGrammerParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FormulaGrammerParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FormulaGrammerParser.COMMA, i);
		}
		public FuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncContext func() {
		FuncContext _localctx = new FuncContext(Context, State);
		EnterRule(_localctx, 16, RULE_func);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(IDENTIFIER);
			State = 76; Match(LPAREN);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAREN) | (1L << PLUS) | (1L << MINUS) | (1L << IDENTIFIER) | (1L << DECIMAL_NUMBER) | (1L << INTEGER_NUMBER) | (1L << PREFIX_BIN_NUMBER) | (1L << PREFIX_HEX_NUMBER) | (1L << PREFIX_INT_NUMBER) | (1L << PREFIX_OCT_NUMBER) | (1L << PREFIX_DEC_NUMBER))) != 0)) {
				{
				State = 77; expression();
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 78; Match(COMMA);
					State = 79; expression();
					}
					}
					State = 84;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 87; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(FormulaGrammerParser.IDENTIFIER, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFormulaGrammerListener typedListener = listener as IFormulaGrammerListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFormulaGrammerVisitor<TResult> typedVisitor = visitor as IFormulaGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 18, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', '^', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x1D', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		' ', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'%', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '(', '\v', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '-', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\x30', '\v', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x37', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x41', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '\x45', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'L', 
		'\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'S', '\n', '\n', '\f', '\n', '\xE', '\n', 'V', '\v', 
		'\n', '\x5', '\n', 'X', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x4', '\x3', '\x2', 
		'\x5', '\x6', '\x3', '\x2', '\a', '\b', '\x2', '\x63', '\x2', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '!', '\x3', '\x2', '\x2', '\x2', '\b', ')', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x36', '\x3', '\x2', '\x2', '\x2', '\f', '@', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x44', '\x3', '\x2', '\x2', '\x2', '\x10', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'M', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'[', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x5', '\x4', '\x3', 
		'\x2', '\x17', '\x18', '\a', '\x2', '\x2', '\x3', '\x18', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1E', '\x5', '\x6', '\x4', '\x2', '\x1A', 
		'\x1B', '\t', '\x2', '\x2', '\x2', '\x1B', '\x1D', '\x5', '\x6', '\x4', 
		'\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', ' ', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x5', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', '!', '&', '\x5', '\b', 
		'\x5', '\x2', '\"', '#', '\t', '\x3', '\x2', '\x2', '#', '%', '\x5', '\b', 
		'\x5', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', 
		'\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\'', '\a', '\x3', '\x2', '\x2', '\x2', '(', 
		'&', '\x3', '\x2', '\x2', '\x2', ')', '.', '\x5', '\n', '\x6', '\x2', 
		'*', '+', '\a', '\v', '\x2', '\x2', '+', '-', '\x5', '\n', '\x6', '\x2', 
		',', '*', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '/', '\t', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\x5', '\x2', '\x2', '\x32', '\x37', 
		'\x5', '\f', '\a', '\x2', '\x33', '\x34', '\a', '\x6', '\x2', '\x2', '\x34', 
		'\x37', '\x5', '\f', '\a', '\x2', '\x35', '\x37', '\x5', '\f', '\a', '\x2', 
		'\x36', '\x31', '\x3', '\x2', '\x2', '\x2', '\x36', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x41', '\x5', '\xE', '\b', '\x2', 
		'\x39', '\x41', '\x5', '\x10', '\t', '\x2', ':', '\x41', '\x5', '\x14', 
		'\v', '\x2', ';', '<', '\a', '\x3', '\x2', '\x2', '<', '=', '\x5', '\x4', 
		'\x3', '\x2', '=', '>', '\a', '\x4', '\x2', '\x2', '>', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '?', '\x41', '\x5', '\x12', '\n', '\x2', '@', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x39', '\x3', '\x2', '\x2', '\x2', '@', 
		':', '\x3', '\x2', '\x2', '\x2', '@', ';', '\x3', '\x2', '\x2', '\x2', 
		'@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x45', '\a', '\r', '\x2', '\x2', '\x43', '\x45', '\a', 
		'\xE', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'L', '\a', '\x13', '\x2', '\x2', 'G', 'L', '\a', '\x11', 
		'\x2', '\x2', 'H', 'L', '\a', '\xF', '\x2', '\x2', 'I', 'L', '\a', '\x12', 
		'\x2', '\x2', 'J', 'L', '\a', '\x10', '\x2', '\x2', 'K', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'G', '\x3', '\x2', '\x2', '\x2', 'K', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x11', '\x3', '\x2', '\x2', '\x2', 'M', 'N', 
		'\a', '\f', '\x2', '\x2', 'N', 'W', '\a', '\x3', '\x2', '\x2', 'O', 'T', 
		'\x5', '\x4', '\x3', '\x2', 'P', 'Q', '\a', '\t', '\x2', '\x2', 'Q', 'S', 
		'\x5', '\x4', '\x3', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 
		'V', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 
		'T', 'U', '\x3', '\x2', '\x2', '\x2', 'U', 'X', '\x3', '\x2', '\x2', '\x2', 
		'V', 'T', '\x3', '\x2', '\x2', '\x2', 'W', 'O', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'Y', 'Z', '\a', '\x4', '\x2', '\x2', 'Z', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\a', '\f', '\x2', '\x2', '\\', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\v', '\x1E', '&', '.', '\x36', '@', '\x44', 'K', 'T', 'W',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
