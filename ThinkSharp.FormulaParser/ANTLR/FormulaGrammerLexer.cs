//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FormulaGrammer.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FormulaGrammerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LPAREN=1, RPAREN=2, PLUS=3, MINUS=4, TIMES=5, DIV=6, COMMA=7, POINT=8, 
		POW=9, IDENTIFIER=10, SCIENTIFIC_NUMBER=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "COMMA", "POINT", 
		"POW", "IDENTIFIER", "SCIENTIFIC_NUMBER", "VALID_ID_START", "VALID_ID_CHAR", 
		"NUMBER", "E1", "E2", "SIGN", "WS"
	};


	public FormulaGrammerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public FormulaGrammerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", "','", "'.'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "COMMA", "POINT", 
		"POW", "IDENTIFIER", "SCIENTIFIC_NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FormulaGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FormulaGrammerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', 'm', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '<', '\n', '\v', '\f', '\v', '\xE', '\v', '?', '\v', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x44', '\n', '\f', '\x3', 
		'\f', '\x5', '\f', 'G', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'K', '\n', '\f', '\x3', '\r', '\x5', '\r', 'N', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x5', '\xE', 'R', '\n', '\xE', '\x3', '\xF', '\x6', '\xF', 
		'U', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 'V', '\x3', '\xF', '\x3', 
		'\xF', '\x6', '\xF', '[', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\\', 
		'\x5', '\xF', '_', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x6', '\x13', 
		'h', '\n', '\x13', '\r', '\x13', '\xE', '\x13', 'i', '\x3', '\x13', '\x3', 
		'\x13', '\x2', '\x2', '\x14', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', 
		'\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', 
		'\v', '\x15', '\f', '\x17', '\r', '\x19', '\x2', '\x1B', '\x2', '\x1D', 
		'\x2', '\x1F', '\x2', '!', '\x2', '#', '\x2', '%', '\xE', '\x3', '\x2', 
		'\x5', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x4', 
		'\x2', '-', '-', '/', '/', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', 
		'\"', '\x2', 'o', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\'', '\x3', '\x2', '\x2', '\x2', '\x5', ')', '\x3', '\x2', '\x2', 
		'\x2', '\a', '+', '\x3', '\x2', '\x2', '\x2', '\t', '-', '\x3', '\x2', 
		'\x2', '\x2', '\v', '/', '\x3', '\x2', '\x2', '\x2', '\r', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x33', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x13', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x39', '\x3', '\x2', '\x2', '\x2', '\x17', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x19', 'M', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x1D', 'T', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '`', '\x3', '\x2', '\x2', '\x2', '!', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '#', '\x64', '\x3', '\x2', '\x2', '\x2', '%', 'g', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\a', '*', '\x2', '\x2', '(', '\x4', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\a', '+', '\x2', '\x2', '*', '\x6', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\a', '-', '\x2', '\x2', ',', '\b', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', '/', '\x2', '\x2', '.', '\n', '\x3', '\x2', 
		'\x2', '\x2', '/', '\x30', '\a', ',', '\x2', '\x2', '\x30', '\f', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\a', '\x31', '\x2', '\x2', '\x32', 
		'\xE', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', '.', '\x2', '\x2', 
		'\x34', '\x10', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\x30', 
		'\x2', '\x2', '\x36', '\x12', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\a', '`', '\x2', '\x2', '\x38', '\x14', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'=', '\x5', '\x19', '\r', '\x2', ':', '<', '\x5', '\x1B', '\xE', '\x2', 
		';', ':', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', 
		'=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x16', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '@', 'J', '\x5', '\x1D', '\xF', '\x2', '\x41', '\x44', '\x5', '\x1F', 
		'\x10', '\x2', '\x42', '\x44', '\x5', '!', '\x11', '\x2', '\x43', '\x41', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x46', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x5', '#', '\x12', 
		'\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x5', 
		'\x1D', '\xF', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 'J', '\x43', 
		'\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 
		'\x18', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\t', '\x2', '\x2', '\x2', 
		'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'R', '\x5', '\x19', '\r', '\x2', 'P', 'R', '\x4', '\x32', 
		';', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x1C', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x4', 
		'\x32', ';', '\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'W', '^', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\a', 
		'\x30', '\x2', '\x2', 'Y', '[', '\x4', '\x32', ';', '\x2', 'Z', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', 
		'_', '\x3', '\x2', '\x2', '\x2', '^', 'X', '\x3', '\x2', '\x2', '\x2', 
		'^', '_', '\x3', '\x2', '\x2', '\x2', '_', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x61', '\a', 'G', '\x2', '\x2', '\x61', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x63', '\a', 'g', '\x2', '\x2', '\x63', '\"', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\t', '\x3', '\x2', '\x2', '\x65', 
		'$', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\t', '\x4', '\x2', '\x2', 
		'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\b', '\x13', '\x2', 
		'\x2', 'l', '&', '\x3', '\x2', '\x2', '\x2', '\r', '\x2', '=', '\x43', 
		'\x46', 'J', 'M', 'Q', 'V', '\\', '^', 'i', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
