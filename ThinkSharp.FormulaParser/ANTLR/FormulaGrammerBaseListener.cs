//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FormulaGrammer.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IFormulaGrammerListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class FormulaGrammerBaseListener : IFormulaGrammerListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaGrammerParser.formula"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFormula([NotNull] FormulaGrammerParser.FormulaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaGrammerParser.formula"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFormula([NotNull] FormulaGrammerParser.FormulaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaGrammerParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpression([NotNull] FormulaGrammerParser.ExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaGrammerParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpression([NotNull] FormulaGrammerParser.ExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaGrammerParser.multiplyingExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplyingExpression([NotNull] FormulaGrammerParser.MultiplyingExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaGrammerParser.multiplyingExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplyingExpression([NotNull] FormulaGrammerParser.MultiplyingExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaGrammerParser.powExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPowExpression([NotNull] FormulaGrammerParser.PowExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaGrammerParser.powExpression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPowExpression([NotNull] FormulaGrammerParser.PowExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PlusAtom</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.signedAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPlusAtom([NotNull] FormulaGrammerParser.PlusAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PlusAtom</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.signedAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPlusAtom([NotNull] FormulaGrammerParser.PlusAtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NegativeAtom</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.signedAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegativeAtom([NotNull] FormulaGrammerParser.NegativeAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NegativeAtom</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.signedAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegativeAtom([NotNull] FormulaGrammerParser.NegativeAtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Function</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.signedAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] FormulaGrammerParser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Function</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.signedAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] FormulaGrammerParser.FunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnsignedAtom</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.signedAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnsignedAtom([NotNull] FormulaGrammerParser.UnsignedAtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnsignedAtom</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.signedAtom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnsignedAtom([NotNull] FormulaGrammerParser.UnsignedAtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaGrammerParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAtom([NotNull] FormulaGrammerParser.AtomContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaGrammerParser.atom"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAtom([NotNull] FormulaGrammerParser.AtomContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ScientificNumber</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.scientific"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScientificNumber([NotNull] FormulaGrammerParser.ScientificNumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ScientificNumber</c>
	/// labeled alternative in <see cref="FormulaGrammerParser.scientific"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScientificNumber([NotNull] FormulaGrammerParser.ScientificNumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaGrammerParser.func"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunc([NotNull] FormulaGrammerParser.FuncContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaGrammerParser.func"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunc([NotNull] FormulaGrammerParser.FuncContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="FormulaGrammerParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariable([NotNull] FormulaGrammerParser.VariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="FormulaGrammerParser.variable"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariable([NotNull] FormulaGrammerParser.VariableContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
