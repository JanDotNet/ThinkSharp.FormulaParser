<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThinkSharp.FormulaParser</name>
    </assembly>
    <members>
        <member name="T:ThinkSharp.FormulaParsing.FormulaParser">
            <summary>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParser"/> class provides static methods for creating <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/> instances.
            Use the method <see cref="M:ThinkSharp.FormulaParsing.FormulaParser.Create"/> to create a <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/> with default configuration.
            Use the method <see cref="M:ThinkSharp.FormulaParsing.FormulaParser.CreateBuilder"/> to create a <see cref="T:ThinkSharp.FormulaParsing.IFormulaParserBuilder"/> that allows to configure the <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/> instance.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.FormulaParser.Create">
            <summary>
            Creates a new <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/> with its default configuration.
            </summary>
            <returns>
            A new <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/> with its default configuration.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.FormulaParser.CreateBuilder">
            <summary>
            Creates a <see cref="T:ThinkSharp.FormulaParsing.IFormulaParserBuilder"/> that allows to configure the <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/>.
            </summary>
            <returns>
            a <see cref="T:ThinkSharp.FormulaParsing.IFormulaParserBuilder"/>.
            </returns>
        </member>
        <member name="P:ThinkSharp.FormulaParsing.FormulaParser.Configuration">
            <summary>
            Gets the configuration for the parser.
            </summary>
        </member>
        <member name="T:ThinkSharp.FormulaParsing.IConfigureConstants">
            <summary>
            Interface encapsulating the API for configuring constants.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureConstants.Add(System.String,System.Double)">
            <summary>
            Adds a constant.
            </summary>
            <param name="name">
            The name of the constant to add.
            </param>
            <param name="value">
            The value of the constant.
            </param>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureConstants.RemoveAll">
            <summary>
            Removes all configured contants.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureConstants.Remove(System.String)">
            <summary>
            Removes the constant with the specified name.
            </summary>
            <param name="name">
            The name of the constant to remove.
            </param>
        </member>
        <member name="T:ThinkSharp.FormulaParsing.IConfigureFunctions">
            <summary>
            Interface encapsulating the API for configuring functions.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureFunctions.Add(System.String,System.Func{System.Double})">
            <summary>
            Adds a function with zero parameters.
            </summary>
            <param name="name">
            The name of the function.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureFunctions.Add(System.String,System.Func{System.Double,System.Double})">
            <summary>
            Adds a function with one paramteter.
            </summary>
            <param name="name">
            The name of the function.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureFunctions.Add(System.String,System.Func{System.Double,System.Double,System.Double})">
            <summary>
            Adds a function with two parameters.
            </summary>
            <param name="name">
            The name of the function.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureFunctions.Add(System.String,System.Func{System.Double,System.Double,System.Double,System.Double})">
            <summary>
            Adds a function with three parameters.
            </summary>
            <param name="name">
            The name of the function.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureFunctions.Add(System.String,System.Func{System.Double,System.Double,System.Double,System.Double,System.Double})">
            <summary>
            Adds a function with four parameters.
            </summary>
            <param name="name">
            The name of the function.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureFunctions.Add(System.String,System.Func{System.Double,System.Double,System.Double,System.Double,System.Double,System.Double})">
            <summary>
            Adds a function with five parameters.
            </summary>
            <param name="name">
            The name of the function.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureFunctions.Add(System.String,System.Func{System.Double[],System.Double})">
            <summary>
            Adds a function with 2 to n parameters.
            </summary>
            <param name="name">
            The name of the function.
            </param>
            <param name="function">
            The function.
            </param>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureFunctions.RemoveAll">
            <summary>
            Removes all configured functions.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureFunctions.Remove(System.String)">
            <summary>
            Removes the function with the specified name.
            </summary>
            <param name="name">
            The name of the function to remove.
            </param>
        </member>
        <member name="T:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures">
            <summary>
            Interface encapsulating the API for configuring supported features.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures.DisableScientificNotation">
            <summary>
            Prevents the usage of scientific notation (e.g. 2e3 = 4000)
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures.DisableBinaryNumberNotation">
            <summary>
            Prevents the usage of binary notation (e.g. 0b101 = 5)
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures.DisableHexadecimalNumberNotation">
            <summary>
            Prevents the usage of hexadecimal notation (e.g. 0x20 = 32)
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures.DisableOctalNumberNotation">
            <summary>
            Prevents the usage of octal notation (e.g. 0o10 = 8)
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures.DisableBracket">
            <summary>
            Prevents the usage of brackets.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures.DisablePow">
            <summary>
            Prevents the usage of pow (e.g. 3^2 = 9)
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures.DisableVariables">
            <summary>
            Ptevents the usage of variables.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures.DisableFunctions">
            <summary>
            Prevents the usage of functions.
            </summary>
        </member>
        <member name="T:ThinkSharp.FormulaParsing.IConfigureValidationBehavior">
            <summary>
            Interface encapsulating the API for configuring validation behavior.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureValidationBehavior.DisableVariableNameValidation">
            <summary>
            Diables the validation of variable names when creating a parsing tree.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IConfigureValidationBehavior.DisableFunctionNameValidation">
            <summary>
            Diables the validation of functions names when creating a parsing tree.
            </summary>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParser.Evaluate(System.String)">
            <summary>
            Evaluates the provided formula to a numeric value.
            </summary>
            <param name="formula">
            The formula to evaluate.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserResult`1"/> object that contains the evaluation result or an error.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParser.Evaluate(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Double})">
            <summary>
            Evaluates the provided formula to a numeric value.
            </summary>
            <param name="formula">
            The formula to evaluate.
            </param>
            <param name="variables">
            A dictionary that provides variables to be used for evaluation.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserResult`1"/> object that contains the evaluation result or an error.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParser.Evaluate(ThinkSharp.FormulaParsing.Ast.Nodes.Node)">
            <summary>
            Evaluates the provided <see cref="T:ThinkSharp.FormulaParsing.Ast.Nodes.Node"/>.
            </summary>
            <param name="formulaNode">
            The root node of the parsing tree to evaluate.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserResult`1"/> object that contains the evaluation result or an error.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParser.Evaluate(ThinkSharp.FormulaParsing.Ast.Nodes.Node,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Double})">
            <summary>
            Evaluates the provided <see cref="T:ThinkSharp.FormulaParsing.Ast.Nodes.Node"/>.
            </summary>
            <param name="formulaNode">
            The root node of the parsing tree to evaluate.
            </param>
            <param name="variables">
            A dictionary that provides variables to be used for evaluation.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserResult`1"/> object that contains the evaluation result or an error.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParser.Parse(System.String)">
            <summary>
            Parses the provided formula to a parsing tree.
            </summary>
            <param name="formula">
            The formula to parse.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserResult`1"/> object that contains the root node of the parsing tree or an error.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParser.Parse(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Double})">
            <summary>
            Parses the provided formula to a parsing tree.
            </summary>
            <param name="formula">
            The formula to parse.
            </param>
            <param name="variables">
            A dictionary that provides variables to be used for evaluation.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserResult`1"/> object that contains the root node of the parsing tree or an error.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParser.RunVisitor``1(System.String,ThinkSharp.FormulaParsing.Ast.Visitors.INodeVisitor{``0})">
            <summary>
            Parses the formula and executes the visitor to the genereted parsing tree.
            </summary>
            <typeparam name="TResult">
            The type of the visitors result.
            </typeparam>
            <param name="formula">
            The formula to parse.
            </param>
            <param name="visitor">
            The visitor to run on the parsing tree.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserResult`1"/> object that contains the result produced by the visitor or an error.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParser.RunVisitor``1(System.String,ThinkSharp.FormulaParsing.Ast.Visitors.INodeVisitor{``0},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Double})">
            <summary>
            Parses the formula and executes the visitor to the genereted parsing tree.
            </summary>
            <typeparam name="TResult">
            The type of the visitors result.
            </typeparam>
            <param name="formula">
            The formula to parse.
            </param>
            <param name="visitor">
            The visitor to run on the parsing tree.
            </param>
            <param name="variables">
            A dictionary that provides variables to be used for evaluation.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserResult`1"/> object that contains the result produced by the visitor or an error.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParser.RunVisitor``1(ThinkSharp.FormulaParsing.Ast.Nodes.Node,ThinkSharp.FormulaParsing.Ast.Visitors.INodeVisitor{``0})">
            <summary>
            Executes the visitor to the provided parsing tree.
            </summary>
            <typeparam name="TResult">
            The type of the visitors result.
            </typeparam>
            <param name="node">
            The root node of the parsing tree to run the visitor on.
            </param>
            <param name="visitor">
            The visitor to run on the parsing tree.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserResult`1"/> object that contains the result produced by the visitor or an error.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParserBuilder.ConfigureFunctions(System.Action{ThinkSharp.FormulaParsing.IConfigureFunctions})">
            <summary>
            Allows to configure functions of the <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/>.
            </summary>
            <param name="functions">
            The <see cref="T:ThinkSharp.FormulaParsing.IConfigureFunctions"/> object that provides methods for configuring functions of the formula parser.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserBuilder"/>.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParserBuilder.ConfigureConstats(System.Action{ThinkSharp.FormulaParsing.IConfigureConstants})">
            <summary>
            Allows to configure constants of the <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/>.
            </summary>
            <param name="constants">
            The <see cref="T:ThinkSharp.FormulaParsing.IConfigureConstants"/> object that provides methods for configuring constants of the formula parser.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.FormulaParserBuilder"/>.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParserBuilder.ConfigureSupportedFeatures(System.Action{ThinkSharp.FormulaParsing.IConfigureSupportedFeatures})">
            <summary>
            Allows to disable features of the <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/>.
            </summary>
            <param name="constants">
            The <see cref="T:ThinkSharp.FormulaParsing.IConfigureSupportedFeatures"/> object that provides methods for disabling features of the formula parser.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.IFormulaParserBuilder"/>.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParserBuilder.ConfigureValidationBehavior(System.Action{ThinkSharp.FormulaParsing.IConfigureValidationBehavior})">
            <summary>
            Allows to configure the validation behavior of the <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/>.
            </summary>
            <remarks>
            The default behavior is, that names of configured functions / provided variables are required. If the formula contains unknown
            functions / variables, the parsing process fails with an appropriated error message.
            This method allows to disable validation for variables / functions which may be useful for creating a parsing tree. 
            </remarks>
            <param name="parsingBehavior">
            The <see cref="T:ThinkSharp.FormulaParsing.IConfigureValidationBehavior"/> object that provides methods for disabling features of the formula parser.
            </param>
            <returns>
            The <see cref="T:ThinkSharp.FormulaParsing.IFormulaParserBuilder"/>.
            </returns>
        </member>
        <member name="M:ThinkSharp.FormulaParsing.IFormulaParserBuilder.Build">
            <summary>
            Build the configured <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/>.
            </summary>
            <returns>
            The configured <see cref="T:ThinkSharp.FormulaParsing.IFormulaParser"/>.
            </returns>
        </member>
        <member name="T:FormulaGrammerBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:IFormulaGrammerListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterFormula(FormulaGrammerParser.FormulaContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.formula"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitFormula(FormulaGrammerParser.FormulaContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.formula"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterExpression(FormulaGrammerParser.ExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitExpression(FormulaGrammerParser.ExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.expression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterMultiplyingExpression(FormulaGrammerParser.MultiplyingExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.multiplyingExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitMultiplyingExpression(FormulaGrammerParser.MultiplyingExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.multiplyingExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterPowExpression(FormulaGrammerParser.PowExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.powExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitPowExpression(FormulaGrammerParser.PowExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.powExpression"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterPlusAtom(FormulaGrammerParser.PlusAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>PlusAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitPlusAtom(FormulaGrammerParser.PlusAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>PlusAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterNegativeAtom(FormulaGrammerParser.NegativeAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>NegativeAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitNegativeAtom(FormulaGrammerParser.NegativeAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>NegativeAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterUnsignedAtom(FormulaGrammerParser.UnsignedAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>UnsignedAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitUnsignedAtom(FormulaGrammerParser.UnsignedAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>UnsignedAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterAtom(FormulaGrammerParser.AtomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitAtom(FormulaGrammerParser.AtomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.atom"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterDecimalNumber(FormulaGrammerParser.DecimalNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>DecimalNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitDecimalNumber(FormulaGrammerParser.DecimalNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>DecimalNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterIntgerNumber(FormulaGrammerParser.IntgerNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>IntgerNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitIntgerNumber(FormulaGrammerParser.IntgerNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>IntgerNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterPrefixedDecNumber(FormulaGrammerParser.PrefixedDecNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedDecNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitPrefixedDecNumber(FormulaGrammerParser.PrefixedDecNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedDecNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterPrefixedIntNumber(FormulaGrammerParser.PrefixedIntNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedIntNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitPrefixedIntNumber(FormulaGrammerParser.PrefixedIntNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedIntNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterPrefixedBinNumber(FormulaGrammerParser.PrefixedBinNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedBinNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitPrefixedBinNumber(FormulaGrammerParser.PrefixedBinNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedBinNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterPrefixedOctNumber(FormulaGrammerParser.PrefixedOctNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedOctNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitPrefixedOctNumber(FormulaGrammerParser.PrefixedOctNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedOctNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterPrefixedHexNumber(FormulaGrammerParser.PrefixedHexNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedHexNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitPrefixedHexNumber(FormulaGrammerParser.PrefixedHexNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedHexNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterFunc(FormulaGrammerParser.FuncContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.func"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitFunc(FormulaGrammerParser.FuncContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.func"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterVariable(FormulaGrammerParser.VariableContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.variable"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitVariable(FormulaGrammerParser.VariableContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.variable"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:FormulaGrammerBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:FormulaGrammerBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:FormulaGrammerBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:FormulaGrammerBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:FormulaGrammerBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:IFormulaGrammerVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitFormula(FormulaGrammerParser.FormulaContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.formula"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitExpression(FormulaGrammerParser.ExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.expression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitMultiplyingExpression(FormulaGrammerParser.MultiplyingExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.multiplyingExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitPowExpression(FormulaGrammerParser.PowExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.powExpression"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitPlusAtom(FormulaGrammerParser.PlusAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>PlusAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitNegativeAtom(FormulaGrammerParser.NegativeAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>NegativeAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitUnsignedAtom(FormulaGrammerParser.UnsignedAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>UnsignedAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitAtom(FormulaGrammerParser.AtomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.atom"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitDecimalNumber(FormulaGrammerParser.DecimalNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>DecimalNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitIntgerNumber(FormulaGrammerParser.IntgerNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>IntgerNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitPrefixedDecNumber(FormulaGrammerParser.PrefixedDecNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedDecNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitPrefixedIntNumber(FormulaGrammerParser.PrefixedIntNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedIntNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitPrefixedBinNumber(FormulaGrammerParser.PrefixedBinNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedBinNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitPrefixedOctNumber(FormulaGrammerParser.PrefixedOctNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedOctNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitPrefixedHexNumber(FormulaGrammerParser.PrefixedHexNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedHexNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitFunc(FormulaGrammerParser.FuncContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.func"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:FormulaGrammerBaseVisitor`1.VisitVariable(FormulaGrammerParser.VariableContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.variable"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:IFormulaGrammerListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:FormulaGrammerParser"/>.
            </summary>
        </member>
        <member name="M:IFormulaGrammerListener.EnterFormula(FormulaGrammerParser.FormulaContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.formula"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitFormula(FormulaGrammerParser.FormulaContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.formula"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterExpression(FormulaGrammerParser.ExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitExpression(FormulaGrammerParser.ExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterMultiplyingExpression(FormulaGrammerParser.MultiplyingExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.multiplyingExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitMultiplyingExpression(FormulaGrammerParser.MultiplyingExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.multiplyingExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterPowExpression(FormulaGrammerParser.PowExpressionContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.powExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitPowExpression(FormulaGrammerParser.PowExpressionContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.powExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterPlusAtom(FormulaGrammerParser.PlusAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>PlusAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitPlusAtom(FormulaGrammerParser.PlusAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>PlusAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterNegativeAtom(FormulaGrammerParser.NegativeAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>NegativeAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitNegativeAtom(FormulaGrammerParser.NegativeAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>NegativeAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterUnsignedAtom(FormulaGrammerParser.UnsignedAtomContext)">
            <summary>
            Enter a parse tree produced by the <c>UnsignedAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitUnsignedAtom(FormulaGrammerParser.UnsignedAtomContext)">
            <summary>
            Exit a parse tree produced by the <c>UnsignedAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterAtom(FormulaGrammerParser.AtomContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitAtom(FormulaGrammerParser.AtomContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterDecimalNumber(FormulaGrammerParser.DecimalNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>DecimalNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitDecimalNumber(FormulaGrammerParser.DecimalNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>DecimalNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterIntgerNumber(FormulaGrammerParser.IntgerNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>IntgerNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitIntgerNumber(FormulaGrammerParser.IntgerNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>IntgerNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterPrefixedDecNumber(FormulaGrammerParser.PrefixedDecNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedDecNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitPrefixedDecNumber(FormulaGrammerParser.PrefixedDecNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedDecNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterPrefixedIntNumber(FormulaGrammerParser.PrefixedIntNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedIntNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitPrefixedIntNumber(FormulaGrammerParser.PrefixedIntNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedIntNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterPrefixedBinNumber(FormulaGrammerParser.PrefixedBinNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedBinNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitPrefixedBinNumber(FormulaGrammerParser.PrefixedBinNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedBinNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterPrefixedOctNumber(FormulaGrammerParser.PrefixedOctNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedOctNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitPrefixedOctNumber(FormulaGrammerParser.PrefixedOctNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedOctNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterPrefixedHexNumber(FormulaGrammerParser.PrefixedHexNumberContext)">
            <summary>
            Enter a parse tree produced by the <c>PrefixedHexNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitPrefixedHexNumber(FormulaGrammerParser.PrefixedHexNumberContext)">
            <summary>
            Exit a parse tree produced by the <c>PrefixedHexNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterFunc(FormulaGrammerParser.FuncContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.func"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitFunc(FormulaGrammerParser.FuncContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.func"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.EnterVariable(FormulaGrammerParser.VariableContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:FormulaGrammerParser.variable"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:IFormulaGrammerListener.ExitVariable(FormulaGrammerParser.VariableContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:FormulaGrammerParser.variable"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:IFormulaGrammerVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:FormulaGrammerParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitFormula(FormulaGrammerParser.FormulaContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.formula"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitExpression(FormulaGrammerParser.ExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.expression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitMultiplyingExpression(FormulaGrammerParser.MultiplyingExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.multiplyingExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitPowExpression(FormulaGrammerParser.PowExpressionContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.powExpression"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitPlusAtom(FormulaGrammerParser.PlusAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>PlusAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitNegativeAtom(FormulaGrammerParser.NegativeAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>NegativeAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitUnsignedAtom(FormulaGrammerParser.UnsignedAtomContext)">
            <summary>
            Visit a parse tree produced by the <c>UnsignedAtom</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.signedAtom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitAtom(FormulaGrammerParser.AtomContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.atom"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitDecimalNumber(FormulaGrammerParser.DecimalNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>DecimalNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitIntgerNumber(FormulaGrammerParser.IntgerNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>IntgerNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.number"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitPrefixedDecNumber(FormulaGrammerParser.PrefixedDecNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedDecNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitPrefixedIntNumber(FormulaGrammerParser.PrefixedIntNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedIntNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitPrefixedBinNumber(FormulaGrammerParser.PrefixedBinNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedBinNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitPrefixedOctNumber(FormulaGrammerParser.PrefixedOctNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedOctNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitPrefixedHexNumber(FormulaGrammerParser.PrefixedHexNumberContext)">
            <summary>
            Visit a parse tree produced by the <c>PrefixedHexNumber</c>
            labeled alternative in <see cref="M:FormulaGrammerParser.prefixedNumber"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitFunc(FormulaGrammerParser.FuncContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.func"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:IFormulaGrammerVisitor`1.VisitVariable(FormulaGrammerParser.VariableContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:FormulaGrammerParser.variable"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
    </members>
</doc>
